#!/usr/bin/env python3

import os
import sys
from string import Template

license_str = """
/* 
 * MIT License
 * 
 * Copyright (c) 2023-2024 Axel PASCON
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
"""

types_list = [
    ["char", "wchar"],
    ["char", "char8"],
    ["char", "char16"],
    ["char", "char32"],
    ["char", "utf8"],
    ["char", "utf16"],
    ["char", "utf32"],

    ["wchar", "char8"],
    ["wchar", "char16"],
    ["wchar", "char32"],
    ["wchar", "utf8"],
    ["wchar", "utf16"],
    ["wchar", "utf32"],

    ["char8", "char16"],
    ["char8", "char32"],
    ["char8", "utf8"],
    ["char8", "utf16"],
    ["char8", "utf32"],

    ["char16", "char32"],
    ["char16", "utf8"],
    ["char16", "utf16"],
    ["char16", "utf32"],

    ["char32", "utf8"],
    ["char32", "utf16"],
    ["char32", "utf32"],

    ["utf8", "utf16"],
    ["utf8", "utf32"],

    ["utf16", "utf32"]
]

struct_template = Template("""

template <>
struct ::uni::detail::string_conversions<${type1}, ${type2}>
    : protected ::uni::detail::str_conv_base
{
};

template <>
struct ::uni::detail::string_conversions<${type2}, ${type1}>
    : protected ::uni::detail::str_conv_base
{
};

""")

def generate_content(t1: str, t2: str) -> str:
    def generate_type(t: str) -> str:
        if t == "char":
            return "char"
        elif t == "wchar":
            return "wchar_t"
        elif t == "char8":
            return "char8_t"
        elif t == "char16":
            return "char16_t"
        elif t == "char32":
            return "char32_t"
        elif t == "utf8":
            return "utf8_char"
        elif t == "utf16":
            return "utf16_char"
        elif t == "utf32":
            return "utf32_char"
        else:
            raise ValueError(f"Invalid type {t}")
    return license_str + struct_template.substitute(type1=generate_type(t1), type2=generate_type(t2))

def generate_file_name(t1: str, t2: str) -> str:
    return f"{t1}_{t2}.ipp"    

def generate_classic():
    for types in types_list:
        file = os.path.abspath(generate_file_name(types[0], types[1]))
        if os.path.exists(file):
            os.remove(file)
        with open(file, "w") as f:
            print(f"Creating file {file}")
            f.write(generate_content(types[0], types[1]))
    return

def generate_noremove():
    for types in types_list:
        file = os.path.abspath(generate_file_name(types[0], types[1]))
        if os.path.exists(file):
            print(f"File {file} already exists, skipping")
            continue
        with open(file, "w") as f:
            print(f"Creating file {file}")
            f.write(generate_content(types[0], types[1]))
    return

def main():
    def usage():
        print("Usage: ./generate.py [classic|noremove]")
        exit(1)
    if len(sys.argv) != 2:
        print("Invalid number of arguments")
        usage()
        exit(1)
    if sys.argv[1] == "classic":
        generate_classic()
    elif sys.argv[1] == "noremove":
        generate_noremove()
    else:
        print("Invalid argument")
        exit(1)

if __name__ == "__main__":
    main()